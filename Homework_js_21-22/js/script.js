/**
 * Возвращает base в степени power. Контролирует корректность параметров.
 * В ошибочных ситуациях возвращает сообщение об ошибке.
 * Оптимизировано для вычисления особых случаев (base==0 base==1 power==0)
 *
 * @param {number} base Основание степени, число.
 * @param {number} power Показатель степени, целое число.
 * @return {number} base в степени power.
 */
 function myPow(base, power) {
    // Проверка входных значений. Должны быть числа.
    if ((+base * 1) !== +base) {
        return 'Ошибка в параметре "base"';
    }
    if ((+power * 1) !== +power) {
        return 'Ошибка в параметре "power"';
    }

    // Если степень == 0, то результат всегда 1
    if (power == 0) {
        return 1;
    }

    if (base == 0 && power < 0) {
        return '0 не может быть в отрицательной степени'
    }

    // Если основание 0 или 1, то результат будет равен основанию
    // Эта конструкция не обязательна. Сделано для оптимизации
    if ([0, 1].indexOf(base) != -1) {
        return base
    }

    // Цикл вычисления степени
    var r = 1;
    for (var i = 1; i <= Math.abs(power); i++) {
        r *= base;
    }

    // Если степень отрицательная, то результат в знаменателе единичной дроби
    // Вариант r == 0 можно не проверять он отсеян при проверке на 0 в отрицательной степени
    if (power < 0) {
        r = 1 / r;
    }

    return r;
}

try {
    // Блок для выполнения в node
    module.exports = myPow;
    var args = process.argv.slice(2); // Получаем параметры командной строки, предназначенные для функции
    console.log(`The result of myPow function with arguments ${args[0]} and ${args[1]} is`, myPow(args[0], args[1]));
} catch (e) { }
